cmake_minimum_required(VERSION 3.16.3)

if(WIN32)
    # utf8版バージョン情報管理ファイル(雛形)の生成
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/version.rc.in ${CMAKE_CURRENT_BINARY_DIR}/version-utf8.rc)

    # utf16版バージョン情報管理ファイルの生成
    execute_process(
        COMMAND ${PYTHON_COMMAND} ${CMAKE_SOURCE_DIR}/build_tool/utf8_to_utf16.py 
        ${CMAKE_CURRENT_BINARY_DIR}/version-utf8.rc ${CMAKE_CURRENT_BINARY_DIR}/version.rc
    )

    # ソースファイルに追加
    list(APPEND DESINGN_PATTERN_SRC_FILES ${CMAKE_CURRENT_BINARY_DIR}/version.rc)
endif()

# ライブラリのターゲット
set(LIB_NAME pattern)

###############################################################################
# Qt Configuration
###############################################################################
message(STATUS "========== [START] Qt Configuration ==========")



# Qt Root Dir (環境変数から取得) for find_package cofig mode.
if($ENV{QT5_DIR} STREQUAL "")
    message(FATAL_ERROR "Not found QT5_DIR env path.")
endif()
message(STATUS "Qt env path: $ENV{QT5_DIR}")

if(MSVC)
    string(REPLACE "\\" "/" QT_DIR $ENV{QT5_DIR})
else()
    set(QT_DIR $ENV{QT5_DIR})
endif()
message(STATUS "Qt path: ${QT_DIR}")

set(QT_QPA_PLATFORM_PLUGIN_DIR ${QT_DIR}/plugins/platforms)
list(APPEND CMAKE_PREFIX_PATH ${QT_DIR})
message(STATUS "CMAKE_PREFIX_PATH: ${CMAKE_PREFIX_PATH}")
# set(Qt5_DIR ${QT_DIR}/lib/cmake CACHE PATH "Qt5 cmake script path")
# message(STATUS "Qt cmake script path: $CACHE{Qt5_DIR}")

find_package(QT NAMES Qt5 CONFIG)

if(NOT QT_FOUND)
    message(FATAL_ERROR "Qt ${QT_VERSION_MAJOR}.${QT_VERSION_MINOR}.${QT_VERSION_PATCH} is not found.")
endif()


message(STATUS "Found Qt Library.")
message(STATUS "Qt Version Major : ${QT_VERSION_MAJOR}")
message(STATUS "Qt Config File Path: ${QT_CONFIG}")

find_package(Qt${QT_VERSION_MAJOR} CONFIG REQUIRED COMPONENTS
    Core
    Gui
    Widgets    
)

# Windows 拡張ライブラリ
if(WIN32)
    find_package(Qt${QT_VERSION_MAJOR} CONFIG REQUIRED COMPONENTS
        WinExtras
    )
endif()

# ライブラリターゲット設定(注意: AUTO_UIC以降で設定しないと、AUTO_UICが起動しない)
add_library(${LIB_NAME})

# AUTOUIC, AUTOMOC と qt_wrap_ui, qt_wrap_cpp の切り替え
# 注意) AUTOUIC, AUTOMOC, AUTORCCは ${CMAKE_SOURCE_DIR} == ${CMAKE_CURRENT_SOURCE_DIR}でしか機能しない！
if(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_CURRENT_SOURCE_DIR})
    # Qt uic, moc, rcc 注意) この記述以降のビルドターゲットでAUTO系が有効になる
    set(CMAKE_AUTOUIC ON)
    set(CMAKE_AUTOMOC ON)
    set(CMAKE_AUTORCC ON)

    # UI compiler 設定
    # ui_<basename>.hのあるディレクトリは自動でインクルードディレクトリに追加される
    list(APPEND CMAKE_AUTOUIC_SEARCH_PATHS ${CMAKE_CURRENT_SOURCE_DIR}/mediator_pattern/ui) # 注意) この記述以降のビルドターゲットのAUTOUIC_SEARCH_PATHSの初期化にCMAKE_AUTOUIC_SEARCH_PATHSが利用される
    list(APPEND CMAKE_AUTOUIC_SEARCH_PATHS ${CMAKE_CURRENT_SOURCE_DIR}/state_pattern/ui)
    message(STATUS "Auto Search Path List for AUTOUIC of Qt: ${CMAKE_AUTOUIC_SEARCH_PATHS}")
    # 生成されたUIヘッダーの内部に格上げするクラスのヘッダーファイルがインクルードされるので、ヘッダーディレクトリを登録
    target_include_directories(${LIB_NAME} PRIVATE 
        ${CMAKE_CURRENT_SOURCE_DIR}/include/mediator_pattern/header_for_moc
        ${CMAKE_CURRENT_SOURCE_DIR}/include/state_pattern/header_for_moc    
    )

    # MOC compiler 設定
    # MOCは自動的にヘッダーファイルの中にあるQtMetaObjectを検出してmoc_<basename>.cppを生成する
    message(STATUS "Directory of Moc sources: ${AUTOGEN_BUILD_DIR}/include")

    # RCC compiler 設定
    file(GLOB QT_QRC_FILES_MEDIATOR ${CMAKE_CURRENT_SOURCE_DIR}/mediator_pattern/qrc/*.qrc)
    file(GLOB QT_QRC_FILES_STATE ${CMAKE_CURRENT_SOURCE_DIR}/state_pattern/qrc/*.qrc)
    target_sources(${LIB_NAME} PRIVATE 
        ${QT_QRC_FILES_MEDIATOR} 
        ${QT_QRC_FILES_STATE}
    )

else()
    # UIC compiler
    message(STATUS "Generate Qt Ui Header Files(.h)...")
    file(GLOB QT_UI_FORMS_MEDIATOR ${CMAKE_SOURCE_DIR}/lib/mediator_pattern/ui/*.ui)
    file(GLOB QT_UI_FORMS_STATE ${CMAKE_SOURCE_DIR}/lib/state_pattern/ui/*.ui)
    list(APPEND QT_UI_FORMS ${QT_UI_FORMS_MEDIATOR})
    list(APPEND QT_UI_FORMS ${QT_UI_FORMS_STATE})

    if(${QT_VERSION_MAJOR} EQUAL 5)
        qt5_wrap_ui(QT_UI_HEADERS ${QT_UI_FORMS})
    else()
        qt_wrap_ui(QT_UI_HEADERS ${QT_UI_FORMS})
    endif()
    message(STATUS "Qt UI Header path generated by qt[5]_wrap_ui() command: ${QT_UI_HEADERS}")

    # MOC compiler
    message(STATUS "Generate Qt moc Source Files(.cpp)...")
    file(GLOB QT_HEADERS_FOR_MOC_MEDIATOR ${CMAKE_SOURCE_DIR}/include/mediator_pattern/header_for_moc/*.hpp)
    # file(GLOB QT_HEADERS_FOR_MOC_STATE ${CMAKE_SOURCE_DIR}/include/state_pattern/header_for_moc/*.hpp)
    list(APPEND QT_HEADERS_FOR_MOC ${QT_HEADERS_FOR_MOC_MEDIATOR})
    # list(APPEND QT_HEADERS_FOR_MOC ${QT_HEADERS_FOR_MOC_STATE})

    if(${QT_VERSION_MAJOR} EQUAL 5)
        qt5_wrap_cpp(QT_MOC_SOURCES ${QT_HEADERS_FOR_MOC} TARGET ${LIB_NAME})
    else()
        qt_wrap_cpp(QT_MOC_SOURCES ${QT_HEADERS_FOR_MOC} TARGET ${LIB_NAME})
    endif()
    message(STATUS "Qt MOC Source Files generated by qt[5]_wrap_cpp() command : ${QT_MOC_SOURCES}")

    # RCC compiler
    message(STATUS "Generate Qt qrc Files(.cpp)...")
    file(GLOB QT_QRC_FILES_MEDIATOR ${CMAKE_SOURCE_DIR}/lib/mediator_pattern/qrc/*.qrc)
    # file(GLOB QT_QRC_FILES_STATE ${CMAKE_SOURCE_DIR}/lib/state_pattern/qrc/*.qrc)
    list(APPEND QT_QRC_FILES ${QT_QRC_FILES_MEDIATOR})
    # list(APPEND QT_QRC_FILES ${QT_QRC_FILES_STATE})

    if(${QT_VERSION_MAJOR} EQUAL 5)
        qt5_add_resources(QT_QRC_SOURCES ${QT_QRC_FILES})
    else()
        qt_add_resources(QT_QRC_SOURCES ${QT_QRC_FILES})
    endif()
    
    # ターゲットに追加
    target_sources(${LIB_NAME} PRIVATE
        ${QT_UI_HEADERS}
        ${QT_MOC_SOURCES}
        ${QT_QRC_SOURCES}
    )

    # ui_<basename>.h が生成されたディレクトリをインクルードディレクトリに追加
    target_include_directories(${LIB_NAME} PRIVATE ${CMAKE_CURRENT_BINARY_DIR})

    # 生成されたUIヘッダーの内部に格上げするクラスのヘッダーファイルがインクルードされるので、
    # ヘッダーディレクトリを登録
    target_include_directories(${LIB_NAME} PUBLIC 
        ${CMAKE_SOURCE_DIR}/include/mediator_pattern
        ${CMAKE_SOURCE_DIR}/include/mediator_pattern/header_for_moc
        # ${CMAKE_SOURCE_DIR}/include/state_pattern
        # ${CMAKE_SOURCE_DIR}/include/state_pattern/header_for_moc     
    )

endif()

# TSファイル(多言語サポート)
# qt5_create_translation(QT_QM_FILES "${CMAKE_CURRENT_SOURCE_DIR}/mediator_pattern" japanese_JP.ts)


# 言語サポート
target_sources(${LIB_NAME} PRIVATE
    ${QT_QM_FILES}       # TS
)

# Include Dir
list(APPEND DESINGN_PATTERN_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/include)
message(STATUS "Include dir: ${DESINGN_PATTERN_INCLUDE_DIR}")

# Source FIles
file(GLOB_RECURSE DESINGN_PATTERN_SRC_FILES ${CMAKE_SOURCE_DIR}/lib/*.cpp)
message(STATUS "Source files: ${DESINGN_PATTERN_SRC_FILES}")

target_sources(${LIB_NAME} PRIVATE ${DESINGN_PATTERN_SRC_FILES})
target_include_directories(${LIB_NAME} PUBLIC ${DESINGN_PATTERN_INCLUDE_DIR})
target_link_libraries(${LIB_NAME} PUBLIC 
    utf8cpp
    nlohmann_json
)

# ターゲットにリンク
target_link_libraries(${LIB_NAME} PUBLIC 
    Qt${QT_VERSION_MAJOR}::Widgets
    Qt${QT_VERSION_MAJOR}::Core
    Qt${QT_VERSION_MAJOR}::Gui
)

# Qt dllファイルを実行ファイル.exeと同じフォルダにコピーする(ビルドイベント機能)
add_custom_command(TARGET ${LIB_NAME} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_if_different $<TARGET_FILE:Qt${QT_VERSION_MAJOR}::Widgets> $<TARGET_FILE_DIR:${LIB_NAME}>
    COMMAND ${CMAKE_COMMAND} -E copy_if_different $<TARGET_FILE:Qt${QT_VERSION_MAJOR}::Core> $<TARGET_FILE_DIR:${LIB_NAME}>
    COMMAND ${CMAKE_COMMAND} -E copy_if_different $<TARGET_FILE:Qt${QT_VERSION_MAJOR}::Gui> $<TARGET_FILE_DIR:${LIB_NAME}>
)

# Windows用のプラットフォームプラグインをコピー
if (MSVC)
    add_custom_command(TARGET ${LIB_NAME} POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy_if_different $<TARGET_FILE:Qt${QT_VERSION_MAJOR}::WinExtras> $<TARGET_FILE_DIR:${LIB_NAME}>
    )

    add_custom_command(TARGET ${LIB_NAME} POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy_if_different $<TARGET_FILE:Qt${QT_VERSION_MAJOR}::QWindowsIntegrationPlugin> $<TARGET_FILE_DIR:${LIB_NAME}>
        COMMAND ${CMAKE_COMMAND} -E copy_if_different $<TARGET_FILE:Qt${QT_VERSION_MAJOR}::QWindowsDirect2DIntegrationPlugin> $<TARGET_FILE_DIR:${LIB_NAME}>
    )
endif()

message(STATUS "========== [END] Qt Configuration ==========")